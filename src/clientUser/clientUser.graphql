type Mutation {
  clientUserMutation: ClientUserMutation!
  achievementMutation: AchievementMutation!
}

type Query {
  clientUserQuery: ClientUserQuery
}

type ClientUserMutation {
  updateClientUser(data: ClientUserUpdateInput!, id: ID!): ClientUserType!
  updateClientUserAvatar(id: ID!, image: Upload!): ClientUserType!
}

type AchievementMutation {
  updateRankOrScore(id: ID!, data: AchievementUpdateRankOrScore!): AchievementType!
  updateJoinedCourse(id: ID!, idCourse: ID!): AchievementType!
  updateFollow(id: ID!, idFollow: ID!): AchievementType!
  updateCompletedCourses(id: ID!, idCourse: ID!): AchievementType!
}

type ClientUserQuery {
  userDetail(id: ID!): ClientUserType!
}

input AchievementUpdateRankOrScore {
  rank: Int
  score: Int
}

input ClientUserUpdateInput {
  name: String
  githubUrl: String
  dayOfBirth: ScalarDate
  homeTown: String
  bio: String
  phone: String
}

type ClientUserType {
  id: ID!
  email: String
  password: String
  githubUrl: String
  dayOfBirth: ScalarDate
  homeTown: String
  bio: String
  phone: String
  imageUrl: String
  filePath: String
  instructor: InstructorType
  achievement: AchievementType!
  name: String!
  createdAt: ScalarDate!
  updatedAt: ScalarDate!
  comments: [UserCommentType]!
}

type AchievementType {
  id: ID!
  rank: Int
  score: Int
  joinedCourse(pagination: PaginationInput): [CourseType]!
  follow(pagination: PaginationInput): [AchievementType]!
  followedBy(pagination: PaginationInput): [AchievementType]!
  completedCourses(pagination: PaginationInput): [CourseType]!
}