type Mutation {
  clientUserMutation: ClientUserMutation!
}

type Query {
  clientUserQuery: ClientUserQuery
}

type ClientUserMutation {
  updateClientUser(data: ClientUserUpdateInput!, id: ID!): ClientUserType!
  updateClientUserAvatar(image: Upload!): ClientUserType!
  updateRank(data: ClientUserUpdateRank): Boolean!
  updateScore(data: ClientUserUpdateScore): Boolean!
  updateJoinedCourse(data: ClientUserUpdateJoinedCourse): Boolean!
  updateFollow(data: ClientUserUpdateFollow): Boolean!
  updateCompletedCourses(idCourse: ID!): Boolean!
}

type ClientUserQuery {
  userDetail(id: ID!): ClientUserType!
}

enum StatusScoreAndRank {
  UP
  DOWN
}

enum StatusCourse {
  JOIN
  LEAVE
}

enum StatusFollow {
  UNFOLLOW,
  FOLLOW
}

input ClientUserUpdateRank {
  rank: Int!
  direction: StatusScoreAndRank!
}

input ClientUserUpdateScore {
  score: Int!
  direction: StatusScoreAndRank!
}

input ClientUserUpdateJoinedCourse {
  idCourse: ID!,
  direction: StatusCourse!
}

input ClientUserUpdateFollow {
  idFollow: ID!,
  direction: StatusFollow!
}

input ClientUserUpdateInput {
  name: String
  githubUrl: String
  dayOfBirth: ScalarDate
  homeTown: String
  bio: String
  phone: String
}

type ClientUserType {
  id: ID!
  email: String
  password: String
  githubUrl: String
  dayOfBirth: ScalarDate
  homeTown: String
  bio: String
  phone: String
  imageUrl: String
  filePath: String
  instructor: InstructorType
  achievement: AchievementType!
  name: String!
  createdAt: ScalarDate!
  updatedAt: ScalarDate!
  comments: [UserCommentType]!
}

type AchievementType {
  id: ID!
  rank: Int
  score: Int
  joinedCourse(pagination: PaginationInput): [CourseType]!
  follow(pagination: PaginationInput): [ClientUserType]!
  followedBy(pagination: PaginationInput): [ClientUserType]!
  completedCourses(pagination: PaginationInput): [CourseType]!
}