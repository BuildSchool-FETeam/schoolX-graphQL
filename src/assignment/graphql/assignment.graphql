input AssignmentSetInput {
  title: String!
  description: String!
  hints: [String]!
  score: Int!
  lessonId: ID!
}

type AssignmentType implements BaseGraphQL {
  id: ID!
  title: String!
  createdAt: ScalarDate!
  updatedAt: ScalarDate!
  description: String!
  hints: [String]!
  score: Int!
  lesson: LessonType!
  codeChallenges(pagination: PaginationInput): [CodeChallengeType]!
  comments(pagination: PaginationInput): [UserCommentType]!
}

input CodeConfigInput {
  code: String!
  language: ProgrammingLanguage!
}



type AssignmentMutation {
  # setQuiz(id: ID, idAssign: ID, data: AssignmentSetInput!): AssignmentType!
  setCodeChallenge(id: ID, data: CodeChallengeSetInput!, dataAssign: AssignmentSetInput): AssignmentType!
  deleteCodeChallenge(id: ID!): Boolean!
  deleteAssignment(id: ID!): Boolean
  runCode(code: String!, language: ProgrammingLanguage): CodeRunResultType!
  runTestCase(
    challengeId: ID!
    data: CodeConfigInput!
  ): SummaryEvaluationResult!
}

type SummaryEvaluationResult {
  summaryEvaluation: Boolean!
  testCaseEvaluations: [EvaluationResult]!
}

type EvaluationResult {
  testResult: Boolean!
  testCaseId: String!
  title: String!
  executeTime: Int
  message: [String]
}

type AssignmentQuery {
  assignment(id: ID!): AssignmentType!
}

type Query {
  assignmentQuery: AssignmentQuery!
}

type CodeRunResultType {
  executeTime: Int
  result: [String]
  status: String
}

type Mutation {
  assignmentMutation: AssignmentMutation!
}
