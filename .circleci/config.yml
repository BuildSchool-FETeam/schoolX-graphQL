version: 2.1
orbs:
  node: circleci/node@5.1.0
  # kubernetes: circleci/kubernetes@1.3.1
# commands:

jobs:
  lint-check: # this can be any name you choose
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - save_cache:
          key: node-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run: 
          name: lint
          command: yarn run lint-report

  prettier-check: # this can be any name you choose
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - save_cache:
          key: node-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run: 
          name: lint
          command: yarn run check-style
  audit: # this can be any name you choose
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-cache-{{ checksum "yarn.lock" }}
            - node-cache-
      - run: 
          name: run audit
          command: yarn run improved-yarn-audit --min-severity critical
  build-gql:
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-cache-{{ checksum "yarn.lock" }}
            - node-cache-
      - run: 
          name: build frontend
          command: yarn build
  unit-test:
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-cache-{{ checksum "yarn.lock" }}
            - node-cache-
      - run: 
          name: UT frontend
          command: yarn test:cov
      - store_test_results:
          path: coverage
  

  # build-and-push-img-fe:
  #   docker:
  #     - image: cimg/base:2022.06
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
  #     - run: 
  #         name: login docker
  #         command: docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - run: 
  #         name: build docker FE image
  #         command: |
  #           scripts/build-images.sh fe latest 
  #           scripts/build-images.sh fe ${CIRCLE_SHA1:0:7}
  #     - run: 
  #         name: push docker images
  #         command: |
  #           bash scripts/push-images.sh latest fe
  #           bash scripts/push-images.sh "${CIRCLE_SHA1:0:7}" fe
  # build-and-push-img-be:
  #   docker:
  #     - image: cimg/base:2022.06
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
  #     - run: 
  #         name: login docker
  #         command: docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - run: 
  #         name: build docker BE image
  #         command: |
  #           scripts/build-images.sh be latest 
  #           scripts/build-images.sh be "${CIRCLE_SHA1:0:7}"
  #     - run: 
  #         name: push docker images
  #         command: |
  #           bash scripts/push-images.sh latest be
  #           bash scripts/push-images.sh "${CIRCLE_SHA1:0:7}" be

  # run-migration-job:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - aws-setup
  #     - kubernetes/install-kubectl
  #     - kubernetes/install-kubeconfig:
  #         kubeconfig: KUBECONFIG_DATA
  #     - run:
  #         name: Run migration job and wait until finish
  #         command: | 
  #           kubectl apply -f k8s/prod/jobs/migration-job.yml
  #           kubectl wait --for=condition=complete --timeout=100s job/migration
  #     - run: 
  #         name: Check the result
  #         command: scripts/check-migration.sh
  #     - run: 
  #         name: Clean job
  #         command: kubectl delete job migration
    
  # deploy-be-fe:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - aws-setup
  #     - kubernetes/install-kubectl
  #     - kubernetes/install-kubeconfig:
  #         kubeconfig: KUBECONFIG_DATA
  #     - run:
  #         name: deploy frontend
  #         command: | 
  #           kubectl set image deployment/todo-fe todo-fe=superknife0512/todo-fe:${CIRCLE_SHA1:0:7}
  #            kubectl rollout status deployment todo-fe
  #     - run:
  #         name: deploy backend
  #         command: | 
  #           kubectl set image deployment/todo-be todo-be=superknife0512/todo-be:${CIRCLE_SHA1:0:7}
  #           kubectl rollout status deployment todo-be
  #     - run:
  #         name: smoke test
  #         command: './scripts/smoke-test.sh'
  #     - run:
  #         name: revert
  #         command: |
  #           kubectl rollout undo deployment todo-be
  #           kubectl rollout undo deployment todo-fe
  #         when: on_fail
      
workflows:
  build_and_test:
    jobs:
      - lint-check
      - prettier-check
      - audit:
          requires: 
          - lint-check
          - prettier-check
      - build-gql:
          requires:
            - audit
      - unit-test:
          requires:
            - audit

      # - build-fe:
      #     requires: 
      #     - audit
      # - build-be:
      #     requires: 
      #     - audit
      # - fe-unit-test:
      #     requires: 
      #     - audit
      # - be-unit-test:
      #     requires: 
      #     - audit
      # - hold:
      #     type: approval
      #     requires:
      #       - fe-unit-test
      #       - be-unit-test

      # - build-and-push-img-fe:
      #     requires:
      #       - hold
      # - build-and-push-img-be:
      #     requires:
      #       - hold

      # - run-migration-job:
      #     requires:
      #       - build-and-push-img-be
      
      # - deploy-be-fe:
      #     requires:
      #       - run-migration-job
      #       - build-and-push-img-fe
      
